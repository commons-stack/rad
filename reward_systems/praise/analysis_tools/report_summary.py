from ..distributions.standard_praise import PraiseDistribution
import plotly.express as px
import pandas as pd
from IPython.display import Markdown, display
import json


author = "Nuggan"
Last_updated = "2022."
version = ""


def run(praise_distribution_data, _config={}):
    """
    Runs the main module function: a summary of this report's corner data

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        res: a markdown string detailing the data

    """
    praise_distribution = PraiseDistribution.generate_from_dict(
        praise_distribution_data
    )

    TOTAL_TOKENS_ALLOCATED = praise_distribution.distAmount
    DUPLICATE_PRAISE_WEIGHT = praise_distribution.duplicatePraiseValuation
    NUMBER_OF_QUANTIFIERS_PER_PRAISE = praise_distribution.quantPerPraise
    PERIOD_START_DATE = pd.DataFrame(praise_distribution.praiseTable)["DATE"].min()[:10]
    PERIOD_END_DATE = pd.DataFrame(praise_distribution.praiseTable)["DATE"].max()[:10]
    PSEUDONYMS_USED = praise_distribution.pseudonymsActive
    pseudonym_string = "were" if bool(PSEUDONYMS_USED) else "were not"

    res = f"<ul><li>This period covers praise given between <b>{PERIOD_START_DATE}</b> and  <b>{PERIOD_END_DATE}</b>. </li> \
<li> We allocated a total of <b>{TOTAL_TOKENS_ALLOCATED}</b> TEC tokens for rewards. </li>\
<li>Duplicate praise received a weighting of <b>{DUPLICATE_PRAISE_WEIGHT}</b> the value of the original praise. </li> \
<li>We assigned <b>{NUMBER_OF_QUANTIFIERS_PER_PRAISE}</b> quantifiers per praise instance. </li> \
<li>Praise receiver names <b>{pseudonym_string}</b> hidden behind pseudonyms during quantification </li> \
</ul>"

    return res


def printDescription(praise_distribution_data, _config={}):
    """
    Prints the description of the analysis module to be displayed above the graph

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the texts

    """
    name = praise_distribution_data["name"]
    header = f'# Distribution summary for  "{name}" '
    description = f""

    display(Markdown(header))
    display(Markdown(description))


def printGraph(praise_distribution_data, _config={}):
    """
    Prints a visualization of the histogram generated by run(). This function is itended to be called from inside the jupyter notebook

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the figure

    """
    desc = Markdown(run(praise_distribution_data))

    display(desc)
