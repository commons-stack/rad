from ..distributions.standard_praise import PraiseDistribution
import plotly.express as px
import pandas as pd
from IPython.display import Markdown, display
import json


author = "Nuggan"
Last_updated = "2022."
version = ""


def run(praise_distribution_data, _config={}):
    """
    Runs the main module function: a histogram of the times each score was given
    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        res: a DataFrame with the requested results. Contains two columns, "QUANT_VALUE" and "COUNTS"

    """
    praise_distribution = PraiseDistribution.generate_from_dict(
        praise_distribution_data
    )

    # clear out the quantifiers who didn't give any rating (i.e. all scores are 0)
    quantifier_rating_table = praise_distribution.get_data_by_quantifier()

    quantifier_sum = (
        quantifier_rating_table[["QUANT_ID", "QUANT_VALUE"]].groupby("QUANT_ID").sum()
    )
    norating_quantifiers = quantifier_sum.loc[
        quantifier_sum["QUANT_VALUE"] == 0
    ].index.tolist()
    # [TODO] removing no-raters got lost somewhere. Redo, this whole func is weird
    freq = (
        quantifier_rating_table[["QUANT_VALUE"]]
        .value_counts()
        .rename_axis("QUANT_VALUE")
        .reset_index(name="COUNTS")
        .sort_values(by=["QUANT_VALUE"])
    )
    freq["QUANT_VALUE"] = freq["QUANT_VALUE"].astype("string")

    return freq


def printDescription(praise_distribution_data, _config={}):
    """
    Prints the description of the analysis module to be displayed above the graph

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the texts

    """
    name = praise_distribution_data["name"]
    header = f"### Rating distribution"
    description = f"Since praise gets valued on a scale, we can take a look at how often each value of the scale gets assigned by quantifiers. Note: This metric disregards scores of praise marked as a duplicate, since the score of the original is already being taken into account."

    display(Markdown(header))
    display(Markdown(description))


def printGraph(praise_distribution_data, _config={}):
    """
    Prints a visualization of the histogram generated by run(). This function is itended to be called from inside the jupyter notebook

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the figure

    """

    distribution = run(praise_distribution_data)

    fig_freq = px.bar(
        distribution,
        x="QUANT_VALUE",
        y="COUNTS",
        labels={"QUANT_VALUE": "Rating", "COUNTS": "Number of appearances"},
        title="Praise Rating Distribution",
        width=800,
        height=300,
    )
    fig_freq.show()
