from importlib.metadata import distribution
from ..praise import Praise
import plotly.express as px
import pandas as pd
from IPython.display import Markdown, display
import json


# header = "# Histogram"
# description = f"This is a histogram of the { self.objectName} object. It's stored in /reward_systems/straight_distribution as a regular python module. Apart from perfoming the analysis, it can also output a visual representation with a specific header (above) and description text. "
author = "Nuggan"
Last_updated = "2022."
version = ""


def run(praise_distribution_data):
    """
    Runs the main module function: a histogram of the reward distribution among users of the reward system

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        res: a DataFrame with the requested results. Contains two columns, "ID" and "AMOUNT TO RECEIVE"

    """
    # print(praise_distribution_data)
    distribution = Praise.generate_from_dict(praise_distribution_data)
    res = distribution.distributionResults

    return res


def printDescription(praise_distribution_data):
    """
    Prints the description of the analysis module to be displayed above the graph

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the texts

    """
    name = praise_distribution_data["name"]
    header = f'# "{name}" Histogram'
    description = f"This is a histogram of the **{ name }** object. It's stored in /reward_systems/straight_distribution as a regular python module. Apart from perfoming the analysis, it can also output a visual representation with a specific header (above) and description text. "

    display(Markdown(header))
    display(Markdown(description))


def printGraph(praise_distribution_data):
    """
    Prints a visualization of the histogram generated by run(). This function is itended to be called from inside the jupyter notebook

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the figure

    """

    distribution = pd.DataFrame(run(praise_distribution_data))

    fig_freq = px.bar(
        distribution,
        x="USER IDENTITY",
        y=["QUANT_REWARD", "PRAISE_REWARD"],
        labels={"TOTAL TO RECEIVE": "Received", "USER IDENTITY": "Beneficiary"},
        title="Rewards received by category",
        color_discrete_map={"PRAISE_REWARD": "blue", "QUANT_REWARD": "green"},
    )
    fig_freq.show()
