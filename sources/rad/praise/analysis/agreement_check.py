from importlib.metadata import distribution
from ..distribution.standard_praise import PraiseDistribution
from . import sort_by_controversial
import plotly.express as px
import pandas as pd
from IPython.display import Markdown, display
import json


author = "Nuggan"
Last_updated = "2022."
version = ""


def run(praise_distribution_data, _config={"value": "duplication"}):
    """
    Runs the main module function: a histogram of the reward distribution among users of the reward system

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        res: a DataFrame with the requested results. Contains two columns, "ID" and "AMOUNT TO RECEIVE"

    """

    # Utility, think about refactoring
    NUMBER_OF_QUANTIFIERS_PER_PRAISE = (
        praise_distribution_data.praiseInstance.quantPerPraise
    )
    col_scores = [f"SCORE {k+1}" for k in range(NUMBER_OF_QUANTIFIERS_PER_PRAISE)]

    if _config["value"] == "duplication":
        _COL = "DUPLICATE ID"
        _AGREED = "DUPLICATION AGREED"
        col_check = [
            f"DUPLICATE ID {k+1}" for k in range(NUMBER_OF_QUANTIFIERS_PER_PRAISE)
        ]
    elif _config["value"] == "dismissal":
        _COL = "DISMISSED"
        _AGREED = "DISMISSAL AGREED"
        col_check = [
            f"DISMISSED {k+1}" for k in range(NUMBER_OF_QUANTIFIERS_PER_PRAISE)
        ]

    print(_COL)
    print(_AGREED)

    # pre-process to remove None
    dup_agree_check = sort_by_controversial.run(praise_distribution_data)

    for k in range(1, NUMBER_OF_QUANTIFIERS_PER_PRAISE + 1):
        col = _COL + " " + str(k)
        dup_agree_check.loc[dup_agree_check[col].isnull(), col] = 0

    dup_agree_check[_AGREED] = [
        len(set(kk)) == 1 for kk in dup_agree_check[col_check].values
    ]

    duplication_disagreement = dup_agree_check.loc[dup_agree_check[_AGREED] == False, :]

    duplication_disagreement = duplication_disagreement.drop(
        ["SPREAD"] + col_scores, axis=1
    )

    return duplication_disagreement, dup_agree_check


def printDescription(praise_distribution_data, _config={}):
    """
    Prints the description of the analysis module to be displayed above the graph

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the texts

    """
    # name = praise_distribution_data["name"]
    name = praise_distribution_data.name
    # header = f'# "{name}" Histogram'
    description = f" TODO Description."

    # display(Markdown(header))
    display(Markdown(description))


def printGraph(praise_distribution_data, _config={"value": "duplication"}):
    """
    Prints a visualization of the histogram generated by run(). This function is itended to be called from inside the jupyter notebook

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the figure

    """

    if _config["value"] == "duplication":
        mode = "duplication"
    elif _config["value"] == "dismissal":
        mode = "dismissal"

    # TODO: think about graphic representation

    (duplication_disagreement, dup_agree_check) = run(praise_distribution_data, _config)

    text = f"Among **{len(dup_agree_check)}** praises, **{len(duplication_disagreement)} ({len(duplication_disagreement)/len(dup_agree_check)*100:.2f}%)** do not agree on {mode}"

    display(Markdown(text))
