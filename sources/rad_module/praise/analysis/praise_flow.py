from ..distributions.standard_praise import PraiseDistribution
import plotly.express as px
import pandas as pd


from bokeh.plotting import figure, show
import holoviews as hv
from holoviews import opts
from IPython.display import Markdown, display
import json


# header = "# Histogram"
# description = f"This is a histogram of the { self.objectName} object. It's stored in /reward_systems/straight_distribution as a regular python module. Apart from perfoming the analysis, it can also output a visual representation with a specific header (above) and description text. "
author = "Nuggan"
Last_updated = "2022."
version = ""


def run(praise_distribution_data, _config={}):
    """
    Runs the main module function: a histogram of the reward distribution among users of the reward system

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        res: a DataFrame with the requested results. Contains two columns, "ID" and "AMOUNT TO RECEIVE"

    """

    # [TODO]  Hard Refactor

    # print(praise_distribution_data)
    distribution = PraiseDistribution.generate_from_dict(praise_distribution_data)

    dataframe_in = pd.DataFrame(distribution.praiseTable)
    dist_for_praise_flow = dataframe_in.rename(
        columns={"FROM USER ACCOUNT": "FROM", "TO USER ACCOUNT": "TO"}
    )

    n_senders = 15
    n_receivers = 25

    reference_df = dist_for_praise_flow[["FROM", "TO", "AVG SCORE"]].copy()
    reference_df.reset_index(inplace=True, drop=True)
    reference_df.dropna(subset=["FROM", "TO", "AVG SCORE"], inplace=True)
    reference_df.reset_index(inplace=True, drop=True)

    # Left side. Praise senders. X largest ones + rest (others). (-1 because of zero-counting)
    n1 = n_senders - 1
    # Right side. Praise receivers. Y larget one + rest (others) (-1 because of zero-counting)
    n2 = n_receivers - 1

    df_from = reference_df.groupby(["FROM"]).sum().copy()
    df_from.reset_index(inplace=True, drop=False)
    min_from = df_from["AVG SCORE"].sort_values(ascending=False).unique()[n1]
    df_from2 = df_from.copy()
    df_from2.loc[df_from2["AVG SCORE"] < min_from, "FROM"] = "Rest from 1"

    df_to = reference_df.groupby(["TO"]).sum().copy()
    df_to.reset_index(inplace=True, drop=False)
    min_to = df_to["AVG SCORE"].sort_values(ascending=False).unique()[n2]
    df_to2 = df_to.copy()
    df_to2.loc[df_to2["AVG SCORE"] < min_to, "TO"] = "Rest to 1"

    df3 = reference_df.copy()
    i = 0

    length_data = df3.shape[0]

    while i < length_data:
        if not (df3.at[i, "FROM"] in df_from2["FROM"].unique()):
            df3.at[i, "FROM"] = "REST FROM"
        if not (df3.at[i, "TO"] in df_to2["TO"].unique()):
            df3.at[i, "TO"] = "REST TO"

        i = i + 1

    df4 = df3.copy()

    df4 = df4.groupby(["FROM", "TO"]).sum().copy()

    df4.reset_index(inplace=True, drop=False)
    df4["TO"] = df4["TO"] + " "

    return df4


def printDescription(praise_distribution_data, _config={}):
    """
    Prints the description of the analysis module to be displayed above the graph

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the texts

    """
    name = praise_distribution_data["name"]
    header = f'# "{name}" Praise flows'
    description = f"This is the praise flow of **{ name }**."

    display(Markdown(header))
    display(Markdown(description))


def printGraph(praise_distribution_data, _config={}):
    """
    Prints a visualization of the histogram generated by run(). This function is itended to be called from inside the jupyter notebook

    Args:
        praise_distribution_data: The object with the reward distribuiton system
    Raises:
        [TODO]: Check for errors and raise them
    Returns:
        nothing, it prints the figure

    """
    hv.extension("bokeh", logo=False)
    distribution = run(praise_distribution_data)

    # [TODO] Something here or in the flow calculation make a warning pop up when converting. figure out what it is

    flow = hv.Sankey(distribution, kdims=["FROM", "TO"], vdims=["AVG SCORE"])

    flow.opts(
        cmap="Category10",
        edge_color="FROM",
        edge_line_width=0,
        node_alpha=1.0,
        label_position="outer",
        bgcolor="snow",
        node_width=40,
        node_sort=True,
        width=1200,
        height=1000,
        title="Praise flow for Batch 1. Sum of Praise. Left - praise sender. Right - praise receiver",
        margin=0,
        padding=0,
        show_values=True,
    )

    # %%opts Sankey (cmap='Category10' edge_color='FROM' edge_line_width=0 node_alpha=1.0)
    # %%opts Sankey [node_sort=False label_position='outer' bgcolor="snow" node_width=40 node_sort=True ]
    # %%opts Sankey [width=1000 height=800 title="Praise flow for Batch 1. Sum of Praise. Left - praise sender. Right - praise receiver"]
    # %%opts Sankey [margin=0 padding=0 show_values=True]

    # hv.Sankey(distribution, kdims=["FROM", "TO"], vdims=["AVG SCORE"])

    return flow
